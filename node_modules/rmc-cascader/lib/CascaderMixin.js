'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _arrayTreeFilter = require('array-tree-filter');

var _arrayTreeFilter2 = _interopRequireDefault(_arrayTreeFilter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

exports["default"] = {
    getDefaultProps: function getDefaultProps() {
        return {
            cols: 3
        };
    },
    getInitialState: function getInitialState() {
        return {
            value: this.getValue(this.props.data, this.props.defaultValue || this.props.value)
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                value: this.getValue(nextProps.data, nextProps.value)
            });
        }
    },
    onValueChange: function onValueChange(index, selectNameValue) {
        var value = this.state.value.concat();
        value[index] = selectNameValue;
        var children = (0, _arrayTreeFilter2["default"])(this.props.data, function (c, level) {
            return level <= index && c.value === value[level];
        });
        var data = children[index];
        var i = void 0;
        for (i = index + 1; data && data.children && data.children.length && i < this.props.cols; i++) {
            data = data.children[0];
            value[i] = data.value;
        }
        value.length = i;
        if (!('value' in this.props)) {
            this.setState({
                value: value
            });
        }
        this.props.onChange(value);
    },
    getValue: function getValue(d, val) {
        var data = d || this.props.data;
        var value = val || this.props.value || this.props.defaultValue;
        if (!value || !value.length) {
            value = [];
            for (var i = 0; i < this.props.cols; i++) {
                if (data && data.length) {
                    value[i] = data[0].value;
                    data = data[0].children;
                } else {
                    value[i] = undefined;
                }
            }
        }
        return value;
    },
    getColArray: function getColArray() {
        var ret = [];
        for (var i = 0; i < this.props.cols; i++) {
            ret[i] = undefined;
        }
        return ret;
    },
    getChildrenTree: function getChildrenTree() {
        var _props = this.props,
            data = _props.data,
            cols = _props.cols;

        var value = this.state.value;
        var childrenTree = (0, _arrayTreeFilter2["default"])(data, function (c, level) {
            return c.value === value[level];
        }).map(function (c) {
            return c.children;
        });
        childrenTree.length = cols - 1;
        childrenTree.unshift(data);
        return childrenTree;
    }
};
module.exports = exports['default'];