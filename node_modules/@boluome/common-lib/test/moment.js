import { assert } from 'chai'

import {
  compose, log,
  moment, addDay, addHour, addMinute, addSecond, week, duration
} from '../src'

describe('moment test', () => {

  describe('格式化日期', () => {
    it('should return a string', () => {
      const str = 1487136727315//new Date() //'2017-02-14'
      const r   = moment('YYYY-MM-DD HH:mm:ss')(str)
      log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('格式化时间戳', () => {
    it('should return a number', () => {
      const str = 1487055743672
      const r   = moment('x')(str)
      // log('result', r)
      assert.equal('number', typeof r)
    })
  })
  describe('格式化星期', () => {
    it('should return a number', () => {
      const str = 1487136727315
      const weekArr = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六']
      const r   = compose(week(weekArr), moment('day'))(str)//week()(moment('day')(str))
      log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('添加一天', () => {
    it('should return a number', () => {
      const str = '2017-02-14'
      const r   = compose(moment('YYYY-MM-DD'), addDay(1), moment('x'))(str)
      // log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('添加一小时', () => {
    it('should return a string', () => {
      const str = '2017-02-14 12:00'
      const r   = compose(moment('YYYY-MM-DD HH'), addHour(1), moment('x'))(str)
      // log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('添加一分钟', () => {
    it('should return a string', () => {
      const str = '2017-02-14 12:00'
      const r   = compose(moment('YYYY-MM-DD HH:mm'), addMinute(1), moment('x'))(str)
      // log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('添加一秒钟', () => {
    it('should return a string', () => {
      const str = '2017-02-14 12:00'
      const r   = compose(moment('YYYY-MM-DD HH:mm:ss'), addSecond(1), moment('x'))(str)
      // log('result', r)
      assert.equal('string', typeof r)
    })
  })

  describe('返回历时', () => {
    it('should return a string', () => {
      const st = '2017-02-14 12:00'
      const et = '2017-02-14 12:12'
      const r   = duration(moment('x')(st), moment('x')(et))
      log('result', r)
      assert.equal(true, Array.isArray(r))
    })
  })
})
