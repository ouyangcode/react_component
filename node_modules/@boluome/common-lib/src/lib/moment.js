import {
  log,
  __,
  compose,
  ifElse,
  replace,
  indexOf,
  lt,
  gte,
  type,
  length,
  toString,
  always,
  equals,
  not,
  both,
  append,
  add,      //加
  subtract, //减
  multiply, //乘
  divide    //除
} from '../'

// string -> string -> [ string | number ]
export const moment = f => s => compose(format(f), create)(s)

// string -> Date -> number
export const addDay  = s => d => compose(moment('x') ,add(moment('x')(d)), _add('d'))(s)

// string -> Date -> number
export const addHour = s => d => compose(moment('x') ,add(moment('x')(d)), _add('h'))(s)

// string -> Date -> number
export const addMinute = s => d => compose(moment('x') ,add(moment('x')(d)), _add('m'))(s)

// string -> Date -> number
export const addSecond = s => d => compose(moment('x') ,add(moment('x')(d)), _add('s'))(s)

// number -> arr -> string
export const week = (weekly = ['周日', '周一', '周二', '周三', '周四', '周五', '周六', '周日']) => day => weekly[day]

export const duration = (st, et, r = []) => {
  const p = adj => dur => {
    r = ifElse(
      gte(dur, __),
      compose(append(__, r), parseInt, divide(dur)),
      always(append(0, r))
    )(adj)
    
    return dur %= adj
  }

  compose(
    p(pick('m')),
    p(pick('h')),
    p(pick('d'))
  )(Math.abs(et - st))

  return r
}

//
// // string -> string
// const day = d => {
//   switch (d) {
//     case 1: return '周一'
//     case 2: return '周二'
//     case 3: return '周三'
//     case 4: return '周四'
//     case 5: return '周五'
//     case 6: return '周六'
//     case 0: return '周日'
//     default: return ''
//   }
// }
// string -> number -> number
const _add = type => step => {
  // const s = 1000
  // const m = multiply(s, 60)
  // const h = multiply(m, 60)
  // const d = multiply(h, 24)
  switch (type) {
    case 'd': return multiply(step, pick('d'))
    case 'h': return multiply(step, pick('h'))
    case 'm': return multiply(step, pick('m'))
    case 's': return multiply(step, pick('s'))
    default : return step
  }
}

const pick = t => {
  const s = 1000
  const m = multiply(s, 60)
  const h = multiply(m, 60)
  const d = multiply(h, 24)
  return { s, m, h, d }[t]
}

// [ string | number ] -> Date
const create = s =>
  ifElse(
    compose(equals('Null'), type),
    always(new Date()),
    always(new Date(
      ifElse(
        both(
          compose(equals('String'), type),
          compose(lt(__, 0), indexOf('T'))
        ),
        replace(/[-]/g, '/'),
        ifElse(
          both(
            compose(equals('Number'), type),
            compose(equals(10), length, toString)
          ),
          multiply(1000),
          always(s)
        )
      )(s)
    ))
  )(s)

// string -> date -> [ string | number ]
const format = f => d => {
  switch (f) {
    case 'x'  : return d.getTime()
    case 'X'  : return divide(d.getTime(), 1000)
    case 'day': return d.getDay()
    default   : return stringify(f)(d)
  }
}

// number -> [ number | string ]
const zero = n => ifElse(gte(__, 10), always(n), always(`0${n}`))(n)

// string -> string -> string
const stringify = f => d => {
  const year   = d.getFullYear()
  const month  = add(d.getMonth(), 1)
  const day    = d.getDate()
  const hour   = d.getHours()
  const minute = d.getMinutes()
  const second = d.getSeconds()

  return ifElse(
    compose(equals('Null'), type),
    always(d),
    compose(
      replace('YYYY', year),
      replace('MM', zero(month)),
      replace('DD', zero(day)),
      replace('HH', zero(hour)),
      replace('mm', zero(minute)),
      replace('ss', zero(second))
    )
  )(f)
}
