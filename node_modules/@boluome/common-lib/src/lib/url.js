import {
  decode,
  encode,
  compose,
  always,
  reduce,
  split,
  assoc,
  gte,
  head,
  last,
  drop,
  join,
  test,
  ifElse,
  values,
  concat,
  map,
  indexOf,
  mapObjIndexed
} from '../'

let serverUrl = ''
// string -> string
export const setServerUrl = url => (serverUrl = url)

// string -> string
export const api = path => ifElse(test(/^(http|https)/), always(path), always(`${ serverUrl }${ path }`))(path)  //.test(path) ? path : `${ serverUrl }${ path }`

// querystring -> object
export const parseQuery = s =>
compose(
  reduce((query, param, arr = compose(map(decode), split('='))(param)) =>
    assoc(head(arr), last(arr), query), {}),
  split('&'),
  gte(indexOf('?', s), 0) ? drop(1) : always(s)
)(s)

// object -> querystring
export const stringifyQuery = o =>
compose(
  concat('?'),
  join('&'),
  values,
  mapObjIndexed((value, key) => compose(join('='), map(encode))([key, value]) )
)(o)
