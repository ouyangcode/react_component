
'use strict';
import React, {Component} from 'react';
import { Icon } from 'antd-mobile'
import {render} from 'react-dom';
import { get, setStore, getStore } from '@boluome/common-lib'
import './style.scss'

export default class Search extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            searchList: [],
            cityList: [],
            searchText: '',
            showCityList: true,  //是否显示城市列表，当显示搜索列表时，隐藏城市列表,城市索引
            localCity: props.localCity.replace(/["省", "市", "区", "县"]/, ""),
            localInList: ""
        }
    }
    componentDidMount() {
        const {api} = this.props;
        console.log("apitest", api);
        if(typeof(api) == "string"){
          get(api).then(({ code, data, message }) => {
            this.getReq(data)
          })
        }
        if(Array.isArray(api)){ //当传入的api是数据是对象形式或是
          this.getReq(api)
        }
    }
    render() {
        let { searchText, searchList, localInList, localCity } = this.state
        if(!localInList.name){    //当城市列表中没有当前城市，仅使用定位城市名作为返回的定位地址
          localInList = {name: localCity}
        }

        const citySelectedHistory = getStore('citySelectedHistory', 'session') ? getStore('citySelectedHistory', 'session').citySelectedHistory : []
        console.log('citySelectedHistory', citySelectedHistory);
        let cityIndex = [];
        // console.log(searchText, searchList)
        return (
            <div className="citySearch">
              <div className="header">
                <div className='input'>
                  <Icon className="searchIcon" type="search" size="md" />
                  <input id = 'searchInput' type = 'text' placeholder = '搜索地区 例如：上海、shanghai' onChange = {() => this.search()} />
                </div>
              </div>
              <div className="cityLeft">
                <div className = { (searchList.length === 0 && searchText.length === 0) ? 'noResults' : 'results' } id='r-results'>
                    {
                        searchList.length > 0 ? (
                          searchList.map((result, idx) => (
                            <p className = 'modal-close' onClick = {() => this.chose(result)} key={idx}>{result.name || result}</p>
                          ))
                        ) : (
                          <p style={ { textAlign: 'center', color: '#bfbfbf', boxSizing: 'border-box' }}>没有结果</p>
                        )
                    }
                </div>
                <div className="local-city" id="cityLocation">
                  <span>定位</span>
                  <p onClick = {() => this.chose(localInList)}>{ localInList.name }</p>
                  {
                    ["1"].map((item) => {
                      cityIndex.push("Location")
                    })
                  }
                </div>
                {
                  citySelectedHistory.length > 0 ?
                  (<div key='city-key-citySelectedHistory' style={{ display: this.state.showCityList ? "block" : "none" }} id='cityHistory' className="cityContainer">
                      <div className='cityKey'>
                      <span>历史</span></div>
                      <ul>
                        {
                          ["1"].map((item) => {
                            cityIndex.push("History")
                          })
                        }
                        {
                          citySelectedHistory.map((city, idx) => (
                            <li style={ (idx + 1) % 3 === 0 ? { marginRight: '0' } : {}  } key={ `city-${ idx }` } onClick={ () => this.chose(city) } >
                              { city.name }
                            </li>
                          ))
                        }
                      </ul>
                  </div>)
                  : ''
                }
                { this.state.cityList.length > 0
                  ? (<div className = 'cityList' style={{ display: this.state.showCityList ? "block" : "none" }}>
                      {
                        this.state.formatCityList.map(({ key, data }, idx) => {
                          cityIndex.push(key)
                          return (
                            <div key={ `city-key-${ idx }` } id={ `city${ key }` } className='cityContainer'>
                              <div className='cityKey'>
                              <span>{ key }</span></div>
                              <ul>
                                {
                                  data.map((city, idx) => (
                                    <li style={ (idx + 1) % 3 === 0 ? { marginRight: '0' } : {}  } key={ `city-${ idx }` } onClick={ () => this.chose(city) } >
                                      { city.name }
                                    </li>
                                  ))
                                }
                              </ul>
                            </div>
                          )
                        })
                      }
                     </div>)
                  : ''
                }
              </div>
              <ul className="cityIndex" style={{ display: this.state.showCityList ? "block" : "none" }}>
                { cityIndex.map( (item, index) => (
                  <li key={ index }>
                      <a href={ `#city${ item }` }>{ item==="Location" ? "定位" : item==="History" ? "历史" : item }</a>
                  </li>
                )) }
              </ul>

            </div>
        )
    }

    chose(result) {
      // console.log("chose", this);
      const {callback} = this.props;
      document.getElementById('searchInput').value = "";
      this.search();
      console.log('result', result);
      this.setCityHistory(result)
      callback(result);
      if(this.props.handleContainerClose){
        this.props.handleContainerClose()
      }
    }

    setCityHistory(cityObj){  //将当前选择的城市保存到session中
      let citySelectedHistory = getStore('citySelectedHistory', 'session') ? getStore('citySelectedHistory', 'session').citySelectedHistory : [];
      citySelectedHistory = citySelectedHistory.filter( item => item.name != cityObj.name )
      citySelectedHistory.unshift(cityObj)
      // console.log('citySelectedHistory', citySelectedHistory);
      setStore('citySelectedHistory', { citySelectedHistory : citySelectedHistory }, 'session')
    }

    getReq (data) {
      console.log('data', data);
        // 将返回的城市列表中的每个城市信息对象中的键名都改成{name: , py: , id: }的形式
        let reply = []
        let index = 0
        let mapedData = data.reduce((nameMap, current) => {
          //获取拼音
          let { py } = current
          //取拼音中的第一个并转成大写字母
          let char = py.substr(0, 1).toUpperCase()
          //如果nameMap中有就往数组里添加一个
          if(nameMap[char]) {
            nameMap[char].push(current)
          }
          //如果nameMap中没有就新建一个数组
          else {
            nameMap[char] = [ current ]
          }
          return nameMap
        }, {})
        //mapedData格式： { A: [{ name:'上海', py: 'shanghai' }], B: [...] }

        //转换mapedData
        for(let k in mapedData) {
          reply[index++] = {
            key : k,
            data: mapedData[k]
          }
        }
        //reply格式： [{ key: 'A', data: [{ name:'上海', py: 'shanghai' }] }, ...]
        // 遍历请求回的城市列表，将定位城市改变对应的城市对象
        const cityName = this.state.localCity
        let cityObj = {}
        data.forEach((item) => {
          if(cityName == item.name){
            cityObj = item
            return
          }
        })
        this.setState({
            cityList: data,
            formatCityList: reply,
            localInList: cityObj
        });
    }
    search() {  //定义搜索事件
        let val = document.getElementById('searchInput').value, t = this;
        if (val === '') {
            return this.setState({searchList: [], searchText: val, showCityList: true});
        }
        let cityList = [];
        for (let i = 0; i < this.state.cityList.length; i++) {  //遍历请求回的城市信息
            if (this.state.cityList[i].name.indexOf(val) > -1 || this.state.cityList[i].py.indexOf(val) == 0) { //当搜索框内容符合城市名的汉字或拼音时，将当前城市保存到搜索到的城市列表中
                cityList.push(this.state.cityList[i]);
            }
        }
        this.setState({
            searchList: cityList,
            searchText: val,
            showCityList: false
        });
    }
};
